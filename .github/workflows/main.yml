# .github/workflows/main.yaml
name: RDP-and-Drive-BiSync-Main-Automated

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

jobs:
  rdp_bisync:
    runs-on: windows-latest
    timeout-minutes: 390  # 6.5 hours
    env:
      LOOP_ID: main
    steps:

      - name: Configure RDP and create user
        shell: pwsh
        run: |
         Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
         Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0 -Force
          netsh advfirewall firewall add rule name=RDP protocol=TCP dir=in localport=3389 action=allow
          Restart-Service TermService -Force
          $user='RDP'; $pass='124421Sg'
          $sec=ConvertTo-SecureString $pass -AsPlainText -Force
          if (-not (Get-LocalUser $user -ErrorAction SilentlyContinue)) {
            New-LocalUser $user -Password $sec -FullName 'Remote User'
            Add-LocalGroupMember Administrators,$user
            Add-LocalGroupMember 'Remote Desktop Users',$user
          } else { Set-LocalUser $user -Password $sec }
          echo "RDP_USER=$user">>$env:GITHUB_ENV
          echo "RDP_PASS=$pass">>$env:GITHUB_ENV
          Write-Host "‚úÖ RDP user configured"

      - name: Install Chocolatey, Tailscale, and rclone
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install tailscale -y
          choco install rclone -y
          Write-Host "‚úÖ Tools installed"

      - name: Install VMware Workstation
        shell: pwsh
        run: |
          try {
            choco install vmwareworkstation -y --timeout=600
            Write-Host "‚úÖ VMware Workstation installed"
          } catch {
            Write-Host "‚ö†Ô∏è VMware install failed"
          }

      - name: Start Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-rdp-main-$env:GITHUB_RUN_ID"
          for ($i=0; $i -lt 12; $i++) {
            Start-Sleep 5
            $ip=&"$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            if ($ip) { break }
          }
          echo "TAILSCALE_IP=$ip">>$env:GITHUB_ENV
          Write-Host "‚úÖ Tailscale IP: $ip"

      - name: Auto-approve Tailscale device via API
        shell: pwsh
        env:
          TAILSCALE_API_TOKEN: ${{ secrets.TAILSCALE_API_TOKEN }}
        run: |
          if ($env:TAILSCALE_API_TOKEN) {
            $node=( & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json ).Self.ID
            if ($node) {
              $hdr=@{Authorization="Bearer $env:TAILSCALE_API_TOKEN"; 'Content-Type'='application/json'}
              Invoke-RestMethod "https://api.tailscale.com/api/v2/device/$node/authorized" -Method Post -Headers $hdr -Body '{"authorized":true}'
              Write-Host "‚úÖ Device auto-approved"
            }
          }

      - name: Show connection info
        shell: pwsh
        run: |
          Write-Host "`nüéØ RDP CONNECTION DETAILS:"
          Write-Host "==========================="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "User: $env:RDP_USER / $env:RDP_PASS"
          Write-Host "Connect via Android or mstsc.exe"
          Write-Host "Session: 5 hours active, secondary starts with 30m left"
          Write-Host "==========================="

      - name: Configure rclone for Google Drive
        shell: pwsh
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_TOKEN: ${{ secrets.GOOGLE_TOKEN }}
        run: |
          $cfg="$env:USERPROFILE\.config\rclone"; if(!(Test-Path $cfg)){New-Item $cfg -ItemType Dir -Force}
          "[gdrive]`ntype = drive`nclient_id = $env:GOOGLE_CLIENT_ID`nclient_secret = $env:GOOGLE_CLIENT_SECRET`nscope = drive`ntoken = $env:GOOGLE_TOKEN" | Set-Content "$cfg\rclone.conf"
          Write-Host "‚úÖ rclone configured"

      - name: Create VMware config.ini
        shell: pwsh
        run: |
          $dir="$env:APPDATA\VMware"; if(!(Test-Path $dir)){New-Item $dir -ItemType Dir -Force}
          New-Item "$dir\config.ini" -ItemType File -Force
          icacls "$dir" /grant "RDP:(OI)(CI)F" /T
          Write-Host "‚úÖ VMware config.ini created"

      - name: Download storage to Desktop\persistent
        shell: pwsh
        run: |
          $dst="$env:USERPROFILE\Desktop\persistent"; if(!(Test-Path $dst)){New-Item $dst -ItemType Dir -Force}
          rclone copy gdrive:/storage $dst --config "$env:USERPROFILE\.config\rclone\rclone.conf" --drive-acknowledge-abuse --drive-skip-gdocs --progress --verbose --retries 3 --timeout 10m
          Write-Host "‚úÖ Storage downloaded"

      - name: Grant persistent folder permissions
        shell: pwsh
        run: |
          icacls "$env:USERPROFILE\Desktop\persistent" /grant "RDP:(OI)(CI)F" /T
          Write-Host "‚úÖ Permissions set"

      - name: Wait until 5h30m for secondary start
        shell: pwsh
        run: |
          Write-Host "‚è≥ Waiting 5h30m before starting secondary workflow..."
          Start-Sleep -Seconds 19800

      - name: Trigger secondary workflow (30m left)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main2.yaml',
              ref: 'main',
              inputs: { triggered_by: 'main', loop_id: 'main' }
            })
            console.log('‚úÖ Secondary workflow triggered with 30m left')

      - name: Wait remaining 30m then sync
        shell: pwsh
        run: |
          Write-Host "‚è≥ Waiting final 30m before sync..."
          Start-Sleep -Seconds 1800

      - name: Run final bi-directional sync
        shell: pwsh
        run: |
          $loc="$env:USERPROFILE\Desktop\persistent"; $rem="gdrive:/storage"
          rclone bisync $loc $rem --config "$env:USERPROFILE\.config\rclone\rclone.conf" --drive-acknowledge-abuse --drive-skip-gdocs --resync --resilient --create-empty-src-dirs --verbose --retries 3 --timeout 15m
          Write-Host "‚úÖ Final sync complete"

      - name: Session complete summary
        shell: pwsh
        run: |
          Write-Host "`nüéØ MAIN SESSION COMPLETE:"
          Write-Host "---------------------------"
          Write-Host "üîÑ Secondary started with 30m remaining"
          Write-Host "‚úÖ Final sync done at $(Get-Date)"
          Write-Host "üîÑ Secondary workflow will handle next cycle"
          Write-Host "==========================="
