name: RDP-and-Drive-BiSync-Secondary

on:
  workflow_dispatch:
    inputs:
      triggered_by:
        required: true
      loop_id:
        required: true
  # No schedule here! Only dispatched by main.yaml

jobs:
  rdp_bisync_secondary:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours for sync window
    env:
      LOOP_ID: secondary
      RDP_USER: 'RDP'
      RDP_PASS: ${{ secrets.RDP_PASS }}
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      TAILSCALE_API_TOKEN: ${{ secrets.TAILSCALE_API_TOKEN }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_TOKEN: ${{ secrets.GOOGLE_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Chocolatey packages
        uses: actions/cache@v3
        with:
          path: C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-choco-cache-secondary

      - name: Install Chocolatey and Tools
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install tailscale rclone -y --no-progress

      - name: Configure RDP user and permissions
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0 -Force
          netsh advfirewall firewall add rule name=RDP protocol=TCP dir=in localport=3389 action=allow
          Restart-Service TermService -Force

          $securePass = ConvertTo-SecureString $env:RDP_PASS -AsPlainText -Force
          if (-not (Get-LocalUser -Name $env:RDP_USER -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $env:RDP_USER -Password $securePass -FullName 'Remote User' -ErrorAction Stop
          } else {
            Set-LocalUser -Name $env:RDP_USER -Password $securePass -ErrorAction Stop
          }

          Add-LocalGroupMember -Group 'Administrators' -Member $env:RDP_USER -ErrorAction Stop
          Add-LocalGroupMember -Group 'Remote Desktop Users' -Member $env:RDP_USER -ErrorAction Stop

          echo "RDP_USER=$env:RDP_USER" >> $env:GITHUB_ENV
          echo "RDP_PASS=$env:RDP_PASS" >> $env:GITHUB_ENV

      - name: Start and approve Tailscale
        shell: pwsh
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-rdp-secondary-$env:GITHUB_RUN_ID"
          for ($i = 0; $i -lt 12; $i++) {
            Start-Sleep -Seconds 5
            $ip = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            if ($ip) { break }
          }
          echo "TAILSCALE_IP=$ip" >> $env:GITHUB_ENV

          if ($env:TAILSCALE_API_TOKEN) {
            $node = ( & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json ).Self.ID
            if ($node) {
              $hdr = @{ Authorization = "Bearer $env:TAILSCALE_API_TOKEN"; 'Content-Type' = 'application/json' }
              Invoke-RestMethod "https://api.tailscale.com/api/v2/device/$node/authorized" -Method Post -Headers $hdr -Body '{"authorized":true}'
            }
          }

      - name: Show connection info
        shell: pwsh
        run: |
          Write-Host "`nüéØ RDP CONNECTION DETAILS (SECONDARY):"
          Write-Host "========================================"
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "User: $env:RDP_USER / $env:RDP_PASS"
          Write-Host "Connect via Android or mstsc.exe"
          Write-Host "Session: 5h 45m active, main starts at 5h 45m"
          Write-Host "========================================"

      - name: Configure rclone for Google Drive
        shell: pwsh
        run: |
          $cfg = "$env:USERPROFILE\.config\rclone"
          if (!(Test-Path $cfg)) { New-Item $cfg -ItemType Directory -Force }
          @"
          [gdrive]
          type = drive
          client_id = $env:GOOGLE_CLIENT_ID
          client_secret = $env:GOOGLE_CLIENT_SECRET
          scope = drive
          token = $env:GOOGLE_TOKEN
          "@ | Set-Content "$cfg\rclone.conf"

      - name: Download storage to Desktop\persistent
        shell: pwsh
        run: |
          $dst = "C:\Users\runneradmin\Desktop\persistent"
          if (!(Test-Path $dst)) { New-Item $dst -ItemType Directory -Force }
          rclone copy gdrive:/storage $dst --config "$env:USERPROFILE\.config\rclone\rclone.conf" --drive-acknowledge-abuse --drive-skip-gdocs --retries 3 --timeout 10m --verbose

      - name: Grant persistent folder permissions
        shell: pwsh
        continue-on-error: true
        run: |
          $folder = "C:\Users\runneradmin\Desktop\persistent"
          $user = "$env:COMPUTERNAME\$env:RDP_USER"
          Write-Host "Granting permissions to $user on $folder"
          icacls $folder /grant "$user:(OI)(CI)F" /T

      - name: Install VMware Workstation from cloned EXE
        shell: pwsh
        run: |
          $exePath = "C:\Users\runneradmin\Desktop\persistent\VMware-workstation-full-17.6.4-24832109.exe"
          if (Test-Path $exePath) {
            Write-Host "Installing VMware from $exePath"
            Start-Process -FilePath $exePath -ArgumentList '/S', '/v"/qn ADDLOCAL=All"' -Wait
          } else {
            Write-Warning "VMware installer not found at $exePath"
          }

      # === SCHEDULING ===
      - name: Wait until 5h45m for main workflow start
        shell: pwsh
        run: |
          Start-Sleep -Seconds 20700  # 5 hours 45 minutes

      - name: Trigger main workflow (hand-off)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main.yaml',
              ref: 'main',
              inputs: { triggered_by: 'main2', loop_id: 'secondary' }
            })

      - name: Wait remaining 15m then sync
        shell: pwsh
        run: |
          Write-Host "‚è≥ Waiting final 15m before sync..."
          Start-Sleep -Seconds 900

      - name: Run final bi-directional sync
        shell: pwsh
        run: |
          $loc = "C:\Users\runneradmin\Desktop\persistent"
          rclone bisync $loc gdrive:/storage --config "$env:USERPROFILE\.config\rclone\rclone.conf" --drive-acknowledge-abuse --drive-skip-gdocs --resync --resilient --create-empty-src-dirs --retries 3 --timeout 15m --verbose

      - name: Session complete summary
        shell: pwsh
        run: |
          Write-Host "`nüéØ SECONDARY SESSION COMPLETE:"
          Write-Host "-------------------------------"
          Write-Host "üîÑ Main started at 5h45m"
          Write-Host "‚úÖ Final sync done at $(Get-Date)"
          Write-Host "üîÑ Main workflow will handle next cycle"
          Write-Host "==============================="
          
