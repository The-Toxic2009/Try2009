name: RDP-with-GoogleDrive

on:
  workflow_dispatch:

jobs:
  secure_rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      # Step 1: Setup RDP
      - name: Configure RDP settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" protocol=TCP dir=in localport=3389 action=allow
          Restart-Service TermService -Force
          Write-Host "‚úÖ RDP configured"

      # Step 2: Create RDP user
      - name: Create RDP user
        shell: pwsh
        run: |
          $user = "RDP"
          $pass = "124421Sg"
          $securePass = ConvertTo-SecureString $pass -AsPlainText -Force
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name $user -Password $securePass -FullName "Remote User"
              Add-LocalGroupMember -Group Administrators -Member $user
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user
          } else {
              Set-LocalUser -Name $user -Password $securePass
          }
          echo "RDP_USER=$user" >> $env:GITHUB_ENV
          echo "RDP_PASS=$pass" >> $env:GITHUB_ENV

      # Step 3: Install tools
      - name: Install Chocolatey
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install Tailscale and rclone with WinFsp
        shell: pwsh
        run: |
          choco install tailscale -y
          choco install rclone -y
          choco install winfsp -y
          Write-Host "‚úÖ Tools installed"

      # Step 4: Start Tailscale
      - name: Start Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-rdp-$env:GITHUB_RUN_ID"
          $ip = ""
          for ($i=0; $i -lt 12; $i++) {
            Start-Sleep -Seconds 5
            $ip = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            if ($ip -and $ip.Trim() -ne "") { break }
          }
          echo "TAILSCALE_IP=$ip" >> $env:GITHUB_ENV
          Write-Host "‚úÖ Tailscale: $ip"

      # Step 5: Configure rclone
      - name: Setup rclone config
        shell: pwsh
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_TOKEN: ${{ secrets.GOOGLE_TOKEN }}
        run: |
          $configDir = "$env:USERPROFILE\.config\rclone"
          if (!(Test-Path $configDir)) { New-Item -ItemType Directory -Path $configDir -Force }
          $configContent = "[gdrive]`ntype = drive`nclient_id = $env:GOOGLE_CLIENT_ID`nclient_secret = $env:GOOGLE_CLIENT_SECRET`nscope = drive`ntoken = $env:GOOGLE_TOKEN"
          $configPath = "$configDir\rclone.conf"
          $configContent | Set-Content -Path $configPath -Encoding UTF8
          
          # Test connection - CORRECTED COMMAND
          rclone ls gdrive: --max-depth 1
          Write-Host "‚úÖ rclone configured and tested"

      # Step 6: Mount Google Drive persistently  
      - name: Mount Google Drive as G drive
        shell: pwsh
        run: |
          # Create persistent mount script
          $mountScript = @"
rclone mount gdrive: G: --config "$env:USERPROFILE\.config\rclone\rclone.conf" --vfs-cache-mode full --vfs-read-chunk-size 128M --network-mode --allow-other --daemon
"@
          $mountScript | Set-Content -Path "C:\mount_gdrive.cmd" -Encoding ASCII
          
          # Execute mount
          cmd /c "C:\mount_gdrive.cmd"
          
          # Wait and verify mount
          for ($i=0; $i -lt 20; $i++) {
            Start-Sleep -Seconds 5
            if (Test-Path "G:\") { 
              Write-Host "‚úÖ Google Drive mounted as G:\"
              # Test if it's actually our Google Drive by trying to list contents
              try {
                $testFiles = Get-ChildItem "G:\" -ErrorAction SilentlyContinue
                Write-Host "‚úÖ Google Drive contents accessible: $($testFiles.Count) items found"
                break
              } catch {
                Write-Host "Mount exists but contents not accessible yet..."
              }
            }
            Write-Host "Waiting for mount... ($($i+1)/20)"
          }

      # Step 7: Display info
      - name: Show connection info
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "üéØ RDP CONNECTION DETAILS:"
          Write-Host "========================="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "Google Drive: G:\ (Your 2TB Drive)"
          Write-Host ""
          Write-Host "üì± Connect via Microsoft Remote Desktop"
          Write-Host "‚è±Ô∏è  Max runtime: 6 hours"
          Write-Host "========================="

      # Step 8: Keep alive with mount monitoring
      - name: Keep alive and monitor
        shell: pwsh
        run: |
          Write-Host "üîÑ Session active with Google Drive mounted on G:\"
          while ($true) {
            Start-Sleep -Seconds 300
            # Monitor mount health
            if (!(Test-Path "G:\")) {
              Write-Host "‚ö†Ô∏è Mount lost, attempting remount..."
              cmd /c "C:\mount_gdrive.cmd"
            } else {
              Write-Host "‚úÖ Google Drive mount healthy"
            }
          }
